import numpy as np
import pandas as pd
from scipy.spatial.distance import pdist, squareform
from scipy.special import erf
from scipy.stats import norm
import matplotlib.pyplot as plt
import seaborn as sns

# Load  data

df = pd.read_csv('data_LoOP.csv')

# the LoOP function

def LoOP(X: np.ndarray, lmbda: float, k: int) -> np.ndarray:
    # Calculate pairwise distances
    dists = squareform(pdist(X, 'euclidean'))

    # Get the k nearest neighbors
    knn_dists = np.sort(dists, axis=1)[:, :k]

    # Calculate reachability distance
    reach_dists = np.maximum(knn_dists, np.partition(dists, kth=k, axis=1)[:, :k])

    # Calculate reachability density
    density = k / (np.sum(reach_dists, axis=1) + np.finfo(float).eps)

    # Calculate PLOF
    plof = density / (np.mean(density[knn_dists.argsort(axis=1)] + np.finfo(float).eps)) - 1

    # Calculate nPLOF
    nplof = np.sqrt(np.mean(np.square(plof)))

    # Calculate LoOP using the cumulative distribution function of the standard normal distribution
    loop = norm.cdf(plof / (nplof * np.sqrt(2.)))

    # Reshape the output to have the same number of rows as the input
    loop = loop.reshape(-1, 1)

    return loop

# Convert DataFrame to numpy array
X = df.values

# Define parameters for LoOP function,
# The ranking of outliers will not be affected by lmbda
# I took the values from the given articles
lmbda = 3  # adjust as needed
k = 20  # adjust as needed

# Call LoOP function
outlier_probabilities = LoOP(X, lmbda, k)

def plot_histogram(outlier_probabilities):
    plt.hist(outlier_probabilities, bins=30, edgecolor='black')
    plt.title('Histogram of Outlier Probabilities')
    plt.xlabel('Outlier Probability')
    plt.ylabel('Frequency')
    plt.show()
plot_histogram(outlier_probabilities)


# Assuming 'X' is your 2-dimensional input data
def plot_scatter(X, outlier_probabilities):
  plt.scatter(X[:, 0], X[:, 1], c=outlier_probabilities, cmap='viridis')
  plt.title('Scatter Plot of Data with LoOP Scores')
  plt.xlabel('Feature 1')
  plt.ylabel('Feature 2')
  plt.colorbar(label='LoOP Score')
  plt.show()
plot_scatter(X, outlier_probabilities)

